{
  "env": {
    "browser": true,
    "es6": true
  },
  "parserOptions": {
    // import('./file.ext');
    "parser": "babel-eslint"
  },
  "extends": ["airbnb-base", "plugin:vue/recommended"],
  "globals": {
    // Big(0.0001) using big.js library
    "Big": true
  },
  "overrides": [
    {
      "files": ["*.vue"],
      /*
        Component.vue

        54 }
        55
        56 </style> 
        57 Code will never be here

        Said there should be an empty string
      */
      "rules": {"eol-last": "off"}
    },
    {
      "files": ["*.test.js"],
      /*
        --> describe('TheTasksCompleted', () => {
          --> test(() => {
            const wrapper = shallowMount(TheTasksCompleted);
            --> expect(wrapper.isVueInstance()).toBe(true);
          });
        });

        Said that this and some other functions not defined
      */
      "rules": {"no-undef": "off"}
    },
    {
      "files": ["*.config.js"],
      "rules": {
        /*
          'postcss-import': {},
          'postcss-preset-env': {},
          'cssnano': {},
        */
        "quote-props": "off",
        /*
          module.exports = {
            ...
          };
          Newline here not needed
        */
        "eol-last": "off"
      }
    }
  ],
  "rules": {
    "no-plusplus": "off",
    /*
      const storData = this.cartItemsStorData.find(
        (storData) => storData.id === this.data.id,
      );

      Said storData is already defined in the upper scope,
      and had to give another untidy name
    */
    "no-shadow": "off",
    /*
      const id = this.data.id;

      Said that in this case it is necessary to apply destructuring
    */
    "prefer-destructuring": "off",
    /*
      <component
        :is="RptItem"
        v-for="data in itemsData"
      />
      computed: {
        RptItem() {
          if (this.itemsData) return () => import('./RptItem.vue');
        },
      },

      Said that at the end of the calculated property, the value should be
      returned
    */
    "consistent-return": "off",
    /*
      resetSidebarScrollPosition(sidebar) {
        sidebar.scrollTop = 0;
      },

      Said that you can’t assign value to the property of an object that
      contains function parameter
    */
    "no-param-reassign": "off",
    /*
      imgUrlInSrcset(name, ext) {
        return require(`./img/${name}.${ext}`);
      },
    */
    "global-require": "off",
    /*
      grid:
        'location shops . to-buyers . projects . call . notifications . enter . registration .' 39.36px
        / 245px auto 10px auto 10px auto 1fr auto 20px auto 20px auto 10px auto 4px;

      And in the editor there is a limit line
    */
    "max-len": "off",
    /*
      .find((data) => data.id === storData.id);
      Лучше чем
      .find(data => data.id === storData.id);
      
      Brackets around a single parameter of the arrow function are required.
      It’s easier to identify function by looking through the code
    */
    "arrow-parens": ["error", "always"],
    /*
      plugins: [createPersistedState({
        paths: [ 'auth' ],
      })]
    */
    "array-bracket-spacing": "off",
    /*
      components: { UserIcon, BitcoinLogo, ArrowRightQuit, SettingsIcon },
    */
    "object-curly-newline": "off",
    /*
      const maxPageScrollOffsetToComfortablyComeBackToTopByManualScrolling
        = pageHeight * 4;
      if (
        pageScrollOffset
        > maxPageScrollOffsetToComfortablyComeBackToTopByManualScrolling
      ) {
        ...
      }

      Said that the operators '=' and '>' should not be on a new line. If we
      shorten the variable names, then the code will not be so clear
    */
    "operator-linebreak": "off",
    "no-use-before-define": "off",
    /*
      mixins: [vueComponentReset(() => ({**error here**
        iconName: 'menu',
        iconText: 'menu',
      }))],
    */
    "arrow-body-style": "off",
    "indent": ["error", 2, {
      /*
        ${
          data.class === 'show-catalog'
            ? '@click="showCatalog"'
            : ''
        }

        Said that the indents in this case are incorrect
      */
      "ignoredNodes": ["TemplateLiteral"]
    }],
    /*
      imgUrlInSrcset(name, ext) {
        return require(`./img/${name}.${ext}`);
      },

      Said that only string literals should be inside the require call
    */
    "import/no-dynamic-require": "off",
    /*
      Said that all packages imported into the webpack config using require,
      should be listed in dependencies, not devDependencies
    */
    "import/no-extraneous-dependencies": "off",
    /*
      <component
        :is="RptCartItem"
        v-for="data in cartItemsData"
        :cartItemsData="cartItemsData"
      />

      Input parameters are properties of the object, and the spelling of their
      names in camelCase is generally accepted. SFC also allows you to write
      attributes in camelCase. Said that you need to write them through a
      dash
    */
    "vue/attribute-hyphenation": "off",
    // <p class="player">2</p>
    "vue/singleline-html-element-content-newline": "off",
    /*
      <div
        v-if="usernameValidationText"
        class="sing-up__validation"
      >{{ usernameValidationText }}</div>

      Because couldn't configure the webpack to make it look like this:

      <div
        v-if="usernameValidationText"
        class="sing-up__validation"
      >
        {{ usernameValidationText }}
      </div>
    */
    "vue/multiline-html-element-content-newline": "off",
    /*
      <div
        @click.prevent="close"
        class="modal__background"
      ></div>

      Said that the attribute class should go before the @click attribute.
      Too much extra work
    */
    "vue/attributes-order": "off",
    /*
      size: {
        type: Number,
        required: false,
      },
      
      Said that you need to set a default value
    */
    "vue/require-default-prop": "off",
    "vue/html-indent": ["error", 2, {
      /*
        <template>

        <div class="catalog-cont">
          <div class="catalog"></div>
        </div>

        </template>

        Said to write in this way

        <template>
          <div class="catalog-cont">
            <div class="catalog"></div>
          </div>
        </template>
      */
      "baseIndent": 0
    }],
    "vue/html-self-closing": ["error", {
      "html": {
        /*
          <a
            href="##"
            class="link-mask"
          ></a>

          In order not to convert tags of some elements after autocompletion to
          self-closing once again
        */
        "normal": "never",
        "component": "always"
      },
      /*
        <svg>
          <use></use>
        </svg>

        Said that use should be self-closing
      */
      "svg": "never"
    }]
  },
  "settings": {
    // import '@/path/file.ext';
    "import/resolver": {
      "webpack": {
        /*
          Path to the config where the resolve option is located, using
          which, linter can figure out which abbreviations are allowed
          upon import using eslint-import-resolver-webpack
        */
        "config": "webpack.base.js"
      }
    }
  }
}