{
  "env": {
    "browser": true,
    "es6": true
  },
  "extends": [
    "airbnb-base",
    "plugin:vue/recommended",
    "plugin:prettier/recommended"
  ],
  "globals": {
    // Big(0.0001) using big.js library
    "Big": true
  },
  "overrides": [
    {
      "files": ["*.vue"],
      /*
        Component.vue
        54 }
        55
        56 </style>
        57 Code will never be here

        Said there should be an empty string
      */
      "rules": {
        "eol-last": "off",
        "indent": "off"
      }
    },
    {
      "files": ["*.test.js"],
      /*
        --> describe('TheTasksCompleted', () => {
          --> test(() => {
            const wrapper = shallowMount(TheTasksCompleted);
            --> expect(wrapper.isVueInstance()).toBe(true);
          });
        });

        Said that this and some other functions not defined
      */
      "rules": { "no-undef": "off" }
    },
    {
      "files": ["*.config.js"],
      "rules": {
        /*
          'postcss-import': {},
          'postcss-preset-env': {},
          'cssnano': {},
        */
        "quote-props": "off",
        /*
          module.exports = {
            ...
          };

          Newline here not needed
        */
        "eol-last": "off"
      }
    }
  ],
  "rules": {
    "no-plusplus": "off",
    /*
      const id = this.data.id;

      Said that in this case it is necessary to apply destructuring
    */
    "prefer-destructuring": "off",
    /*
      resetSidebarScrollPosition(sidebar) {
        sidebar.scrollTop = 0;
      },

      Said that you can’t assign value to the property of an object that
      contains function parameter
    */
    "no-param-reassign": "off",
    /*
      TheMenu.vue
      grid:
        'location shops . to-buyers . projects . call . notifications . enter . registration .' 39.36px
        / 245px auto 10px auto 10px auto 1fr auto 20px auto 20px auto 10px auto 4px;

      And in the editor there is a limit line
    */
    "max-len": "off",
    /*
      .find((data) => data.id === storData.id);
      Better than
      .find(data => data.id === storData.id);

      Brackets around a single parameter of the arrow function are required.
      It’s easier to identify function by looking through the code
    */
    "arrow-parens": ["error", "always"],
    /*
      const maxPageScrollOffsetToComfortablyComeBackToTopByManualScrolling
        = pageHeight * 4;
      if (
        pageScrollOffset
        > maxPageScrollOffsetToComfortablyComeBackToTopByManualScrolling
      ) {
        ...
      }

      Said that the operators '=' and '>' should not be on a new line. If we
      shorten the variable names, then the code will not be so clear
    */
    "operator-linebreak": "off",
    /*
      mixins: [vueComponentReset(() => ({**error here**
        iconName: 'menu',
        iconText: 'menu',
      }))],
    */
    "arrow-body-style": "off",
    /*
      function request(url, options, responseType) {
        try {
          ...
          return parsedData;
        } catch (errorResponse) {
          if (!(errorResponse instanceof Error)) {
            ...
            return parsedErrorData;
          }
        }
      }

      Said that expect to return a value at the end of function
    */
    "consistent-return": "off",
    /*
      Said that all packages imported into the webpack config using require,
      should be listed in dependencies, not devDependencies
    */
    "import/no-extraneous-dependencies": "off",
    /*
      <component
        :is="RptCartItem"
        v-for="data in cartItemsData"
        :cartItemsData="cartItemsData"
      />

      Input parameters are properties of the object, and the spelling of their
      names in camelCase is generally accepted. SFC also allows you to write
      attributes in camelCase. Said that you need to write them through a
      dash
    */
    "vue/attribute-hyphenation": "off",
    "indent": [
      "error",
      2,
      {
        /*
          ${
            data.class === 'show-catalog'
              ? '@click="showCatalog"'
              : ''
          }

          Said that the indents in this case are incorrect
        */
        "ignoredNodes": ["TemplateLiteral"]
      }
    ],
    "vue/script-indent": [
      "error",
      2,
      {
        /*
          <script>
            export default {};
          </script>

          Instead of

          <script>
          export default {};
          </script>
        */
        "baseIndent": 1
      }
    ],
    "vue/html-self-closing": [
      "error",
      {
        "html": {
          /*
            <a
              href="##"
              class="link-mask"
            ></a>

            In order not to convert tags of some elements after autocompletion
            to self-closing once again
          */
          "normal": "never"
        },
        /*
          <svg>
            <use></use>
          </svg>

          Said that use should be self-closing
        */
        "svg": "never"
      }
    ]
  },
  "settings": {
    // import '@/path/file.ext';
    "import/resolver": {
      "webpack": {
        /*
          Path to the config where the resolve option is located, using
          which, linter can figure out which abbreviations are allowed
          upon import using eslint-import-resolver-webpack
        */
        "config": "webpack.base.js"
      }
    }
  }
}
